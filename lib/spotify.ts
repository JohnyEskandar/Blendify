// lib/spotify.ts

const client_id = process.env.SPOTIFY_CLIENT_ID!
const client_secret = process.env.SPOTIFY_CLIENT_SECRET!
const redirect_uri = process.env.SPOTIFY_REDIRECT_URI!


const getBasicAuthHeader = () =>
  Buffer.from(`${client_id}:${client_secret}`).toString('base64')

export async function getTokens(code: string): Promise<any> {
  const res = await fetch('https://accounts.spotify.com/api/token', {
    method: 'POST',
    headers: {
      Authorization: `Basic ${getBasicAuthHeader()}`,
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: new URLSearchParams({
      grant_type: 'authorization_code',
      code,
      redirect_uri,
    }),
  })

  if (!res.ok) {
    throw new Error(`Failed to exchange token: ${await res.text()}`)
  }

  return res.json()
}

export async function getUserProfile(accessToken: string): Promise<any> {
  const res = await fetch('https://api.spotify.com/v1/me', {
    headers: { Authorization: `Bearer ${accessToken}` },
  })

  if (!res.ok) throw new Error('Failed to fetch user profile')
  return res.json()
}

export async function getUserPlaylists(accessToken: string): Promise<any> {
  const res = await fetch('https://api.spotify.com/v1/me/playlists?limit=50', {
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  })

  if (!res.ok) throw new Error('Failed to fetch playlists')
  return res.json()
}

export async function getAudioAnalysis(trackId: string, accessToken: string): Promise<any> {
  const res = await fetch(`https://api.spotify.com/v1/audio-analysis/${trackId}`, {
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  })

  if (!res.ok) {
    throw new Error(`Audio analysis failed for ${trackId}: ${await res.text()}`)
  }

  return res.json()
}

export async function getRecommendationsFromSeed(
  seedTrackId: string,
  accessToken: string
): Promise<any> {
  const url = `https://api.spotify.com/v1/recommendations?seed_tracks=${seedTrackId}&limit=50`

  const res = await fetch(url, {
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  })

  if (!res.ok) {
    const errorText = await res.text()
    console.error('‚ö†Ô∏è Spotify recommendation failed:')
    console.error('‚Üí URL:', url)
    console.error('‚Üí Track ID:', seedTrackId)
    console.error('‚Üí Access token (first 10 chars):', accessToken.slice(0, 10))
    console.error('‚Üí Raw response:', errorText || '[empty]')
    throw new Error(`Failed to fetch recommendations: ${errorText || '[empty]'}`)
  }

  return res.json()
}



export async function createPlaylist(
  userId: string,
  name: string,
  accessToken: string
): Promise<any> {
  const res = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${accessToken}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      name,
      description: 'Generated by Blendify üéß',
      public: false,
    }),
  })

  if (!res.ok) {
    throw new Error(`Failed to create playlist: ${await res.text()}`)
  }

  return res.json()
}

export async function addTracksToPlaylist(
  playlistId: string,
  uris: string[],
  accessToken: string
): Promise<any> {
  const res = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${accessToken}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      uris,
    }),
  })

  if (!res.ok) {
    throw new Error(`Failed to add tracks to playlist: ${await res.text()}`)
  }

  return res.json()
}
